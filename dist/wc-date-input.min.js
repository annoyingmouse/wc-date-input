!function(){"use strict";class t extends HTMLElement{#t=0;#e=0;#i=0;#a="Day";#s="Month";#n="Year";static get observedAttributes(){return["value","min","max","disabled","readonly","required","dayText","monthText","yearText"]}static formAssociated=!0;constructor(){super(),this.internals=this.attachInternals(),this.shadow=this.attachShadow({mode:"closed",delegatesFocus:!0}),this.shadow.innerHTML=`${this.css}${this.html}`,this.pattern=new RegExp("^\\d{4}\\-(0?[1-9]|1[012])\\-(0?[1-9]|[12][0-9]|3[01])$"),this.warnedMin=!1,this.warnedMax=!1,this.disabled=!1}connectedCallback(){this.dayInput=this.shadow.querySelector("#day"),this.monthInput=this.shadow.querySelector("#month"),this.yearInput=this.shadow.querySelector("#year"),this.dayInput.addEventListener("blur",(()=>{this.updateDayValue()})),this.monthInput.addEventListener("blur",(()=>{this.updateMonthValue()})),this.yearInput.addEventListener("blur",(()=>{this.updateYearValue()})),this.updateInputs()}updateInputs(){this.dayInput.value=`${this.#t?this.#t:""}`,this.monthInput.value=`${this.#e?this.#e:""}`,this.yearInput.value=`${this.#i?this.#i:""}`,this.#t&&this.updateDayValue(),this.#e&&this.updateMonthValue(),this.#i&&this.updateYearValue()}get css(){return'\n      <style>\n        .date-input {\n          display: grid; \n          grid-template-columns: 2.75em 2.75em 4em;\n          gap: 0% 1em; \n          font-family: arial,sans-serif;\n        }\n        .date-input:after {\n          content: "";\n          display: block;\n          clear: both;\n        }\n        .form-group {\n          display: flex;\n          flex-direction: column;\n        }\n        .form-group:after {\n          content: "";\n          display: block;\n          clear: both;\n        }\n        label {\n          display: block;\n          font-weight: normal;\n          font-size: .85em;\n          line-height: 2em;\n          margin-bottom: .2em;\n          text-size-adjust: 100%;\n          font-smoothing: antialiased;\n        }\n        input {\n          height: 2em;\n          margin-top: 0;\n          line-height: 1.5em;\n          border: 2px solid #0b0c0c;\n          padding: .5em;\n          border-radius: 0;\n        }\n        input.error {\n          border-color: #D4352C;\n        }\n        input:focus {\n          outline: .3rem solid #FFDD00;\n          outline-offset: 0;\n          box-shadow: inset 0 0 0 .15em;\n        }\n      </style>\n    '}get html(){return`\n      <div class="date-input">\n        <div class="form-group">\n          <label for="day">\n            ${this.dayText}\n          </label>\n          <input id="day"\n                 name="day"\n                 type="text"\n                 min="1"\n                 max="31"\n                 pattern="^((0?[1-9])|([12][0-9])|(3[01]))$"\n                 ${this.disabled?"disabled":""}\n                 ${this.readonly?"readonly":""}\n                 value="${this.#t?this.#t:""}"\n                 inputmode="numeric"\n                 data-form-type="date,day"\n                 tabindex="0" />\n        </div>\n        <div class="form-group">\n          <label for="month">\n            ${this.monthText}\n          </label>\n          <input id="month"\n                 name="month"\n                 type="text"\n                 min="1"\n                 max="12"\n                 pattern="^((0[1-9])|(1[0-2]))$"\n                 ${this.disabled?"disabled":""}\n                 ${this.readonly?"readonly":""}\n                 value="${this.#e?this.#e:""}"\n                 inputmode="numeric"\n                 data-form-type="date,month"\n                 tabindex="0" />\n        </div>\n        <div class="form-group year-inout">\n          <label for="year"/>\n            ${this.yearText}\n          </label>\n          <input id="year"\n                 name="year"\n                 type="text"\n                 pattern="^\\d{4}$"\n                 ${this.disabled?"disabled":""}\n                 ${this.readonly?"readonly":""}\n                 value="${this.#i?this.#i:""}"\n                 inputmode="numeric" \n                 data-form-type="date,year"\n                 tabindex="0" />\n        </div>\n      </div>\n    `}attributeChangedCallback(t,e,i){switch(t){case"required":e!==i&&(this.required=null!==i);break;case"disabled":e!==i&&(this.disabled=null!==i);break;case"readonly":e!==i&&(this.readonly=null!==i);break;case"value":e!==i&&(this.value=i,this.populateDate());break;case"min":e!==i&&(this.min=null!==i?i:null);break;case"max":e!==i&&(this.max=null!==i?i:null);break;case"day-text":e!==i&&(this.dayText=null!==i?i:null);break;case"month-text":e!==i&&(this.monthText=null!==i?i:null);break;case"year-text":e!==i&&(this.yearText=null!==i?i:null)}}isLeapYear(t){return!!t&&(t%4==0&&t%100!=0||t%400==0)}createDateString(){return this.#i&&this.#e&&this.#t?`${this.#i.toString().padStart(4,"0")}-${this.#e.toString().padStart(2,"0")}-${this.#t.toString().padStart(2,"0")}`:""}updateDay(t){t?(this.#t=t,this.dayInput.value=`${t}`,this.dayInput.classList.remove("error")):(this.#t=0,this.dayInput.value="")}updateMonth(t){t?(this.#e=t,this.monthInput.value=`${t}`,this.monthInput.classList.remove("error")):(this.#e=0,this.monthInput.value="")}updateYear(t){t?(this.#i=t,this.yearInput.value=`${t}`,this.yearInput.classList.remove("error")):(this.#i=0,this.yearInput.value="")}updateDate(){this.#t&&this.#e&&this.#i&&this.checkDateIsValid(this.createDateString())?this.value=this.createDateString():this.value=""}checkDay(t){return!(t>31||t<1)&&(!(this.min&&this.#i&&this.#e&&this.#i===this.min.getFullYear()&&this.#e===this.min.getMonth()+1&&t<this.min.getDate())&&(!(this.max&&this.#i&&this.#e&&this.#i===this.max.getFullYear()&&this.#e===this.max.getMonth()+1&&t>this.max.getDate())&&(!this.#e||(2===this.#e?this.#i?!(t>29&&this.isLeapYear(this.#i))&&!(t>28&&!this.isLeapYear(this.#i)):!(t>29):4===this.#e||6===this.#e||9===this.#e||11===this.#e?!(t>30):!(t>31)))))}checkMonth(t){if(t>12||t<1)return!1;if(this.min){if(this.#i&&this.#i===this.min.getFullYear()&&t<this.min.getMonth()+1)return!1;if(this.#i&&this.#t&&this.#i===this.min.getFullYear()&&t===this.min.getMonth()+1&&this.#t<this.min.getDate())return!1}if(this.max){if(this.#i&&this.#i===this.max.getFullYear()&&t>this.max.getMonth()+1)return!1;if(this.#i&&this.#t&&this.#i===this.max.getFullYear()&&t===this.max.getMonth()+1&&this.#t>this.max.getDate())return!1}return!this.#t||(2===t?this.#i?!(this.#t>29&&this.isLeapYear(this.#i))&&!(this.#t>28&&!this.isLeapYear(this.#i)):!(this.#t>29):4===t||6===t||9===t||11===t?!(this.#t>30):!(this.#t>31))}checkYear(t){if(t>9999||t<1)return!1;if(this.min){if(t<this.min.getFullYear())return!1;if(this.#e&&t===this.min.getFullYear()&&this.#e<this.min.getMonth()+1)return!1;if(this.#t&&t===this.min.getFullYear()&&this.#e===this.min.getMonth()+1&&this.#t<this.min.getDate())return!1}if(this.max){if(t>this.max.getFullYear())return!1;if(this.#e&&t===this.max.getFullYear()&&this.#e>this.max.getMonth()+1)return!1;if(this.#t&&t===this.max.getFullYear()&&this.#e===this.max.getMonth()+1&&this.#t>this.max.getDate())return!1}return!(2===this.#e&&this.#t>0)||!(this.#t>29&&this.isLeapYear(t))&&!(this.#t>28&&!this.isLeapYear(t))}updateDayValue(){const t=Number(this.dayInput.value);!isNaN(t)&&this.checkDay(t)?this.updateDay(t):this.updateDay(0),this.updateDate()}updateMonthValue(){const t=Number(this.monthInput.value);!isNaN(t)&&this.checkMonth(t)?this.updateMonth(t):this.updateMonth(0),this.updateDate()}updateYearValue(){const t=Number(this.yearInput.value);!isNaN(t)&&this.checkYear(t)?this.updateYear(t):this.updateYear(0),this.updateDate()}checkDateIsValid(t){if(this.pattern.test(t)){const[e,i,a]=t.split("-"),s=new Date(t);return s.getDate()===Number(a)&&s.getMonth()+1===Number(i)&&s.getFullYear()===Number(e)}return!1}populateDate(){if(this.hasAttribute("value")&&this.pattern.test(this.getAttribute("value")))if(this.checkDateIsValid(this.getAttribute("value"))){const[t,e,i]=this.getAttribute("value").split("-");this.#t=Number(i),this.#e=Number(e),this.#i=Number(t),this.updateInputs()}else console.warn(`Supplied value (${this.getAttribute("value")}) is not a valid date (YYYY-MM-DD), ignoring...`),this.#t=this.#t?this.#t:0,this.#e=this.#e?this.#e:0,this.#i=this.#i?this.#i:0,this.updateInputs(),this.value="";else this.#t=this.#t?this.#t:0,this.#e=this.#e?this.#e:0,this.#i=this.#i?this.#i:0,this.updateInputs(),this.value="";return this.createDateString()}get value(){this.populateDate()}set value(t){if(this.setAttribute("value",t),this.internals.setFormValue(t),!t&&this.required){const t=this.dataset.valueMissing??"Please enter a date.";this.internals.setValidity({valueMissing:!0},t,this.#t?this.#e?this.yearInput:this.monthInput:this.dayInput),this.#t||this.dayInput.classList.add("error"),this.#e||this.monthInput.classList.add("error"),this.#i||this.yearInput.classList.add("error")}else this.internals.setValidity({})}get min(){return this.hasAttribute("min")&&this.pattern.test(this.getAttribute("min"))?this.checkDateIsValid(this.getAttribute("min"))?new Date(this.getAttribute("min")):(this.warnedMin||(console.warn(`Supplied min date (${this.getAttribute("min")}) is not a valid date (YYYY-MM-DD), ignoring...`),this.warnedMin=!0),null):null}set min(t){this.setAttribute("min",t)}get max(){return this.hasAttribute("max")&&this.pattern.test(this.getAttribute("max"))?this.checkDateIsValid(this.getAttribute("max"))?new Date(this.getAttribute("max")):(this.warnedMax||(console.warn(`Supplied max date (${this.getAttribute("max")}) is not a valid date (YYYY-MM-DD), ignoring...`),this.warnedMax=!0),null):null}set max(t){this.setAttribute("max",t)}get dayText(){return this.hasAttribute("day-text")?this.getAttribute("day-text"):this.#a}get monthText(){return this.hasAttribute("month-text")?this.getAttribute("month-text"):this.#s}get yearText(){return this.hasAttribute("year-text")?this.getAttribute("year-text"):this.#n}get required(){return this.hasAttribute("required")}get disabled(){return this.hasAttribute("required")}set required(t){"true"!==t&&!0!==t||this.setAttribute("required","true"),"false"!==t&&!1!==t||this.removeAttribute("required")}get readonly(){return this.hasAttribute("readonly")}set readonly(t){"true"!==t&&!0!==t||this.setAttribute("readonly","true"),"false"!==t&&!1!==t||this.removeAttribute("readonly")}set disabled(t){"true"!==t&&!0!==t||this.setAttribute("disabled","true"),"false"!==t&&!1!==t||this.removeAttribute("disabled")}get form(){return this.internals.form}get name(){return this.getAttribute("name")}set name(t){this.setAttribute("name",t)}get validity(){return this.internals.validity}get validationMessage(){return this.internals.validationMessage}get willValidate(){return this.internals.willValidate}checkValidity(){return this.internals.checkValidity()}reportValidity(){return this.internals.reportValidity()}}window.customElements.define("wc-date-input",t)}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
